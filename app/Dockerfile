# Dockerfile pour l'application Flask Big Data
FROM python:3.10-slim

LABEL maintainer="BigData UCAO 2025"
LABEL description="Application web Flask pour visualisation Big Data"

# Variables d'environnement
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV FLASK_APP=main.py
ENV FLASK_ENV=production

# Installer les d√©pendances syst√®me
RUN apt-get update && apt-get install -y \
    curl \
    netcat-traditional \
    && rm -rf /var/lib/apt/lists/*

# Cr√©er l'utilisateur d'application
RUN useradd -m -s /bin/bash flaskuser

# Cr√©er les r√©pertoires de travail
WORKDIR /app
RUN mkdir -p /app/results /app/static /app/templates
RUN chown -R flaskuser:flaskuser /app

# Copier les requirements et installer les d√©pendances Python
COPY requirements.txt .
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

# Copier le code de l'application
COPY . .

# Ajuster les permissions
RUN chown -R flaskuser:flaskuser /app
RUN chmod +x /app/main.py

# Passer √† l'utilisateur non-root
USER flaskuser

# Exposer le port
EXPOSE 5000

# Script de d√©marrage avec v√©rifications de sant√©
RUN echo '#!/bin/bash\n\
echo "=== D√©marrage Application Flask Big Data ==="\n\
echo "V√©rification des services externes..."\n\
\n\
# Attendre MongoDB\n\
echo "‚è≥ Attente MongoDB..."\n\
while ! nc -z mongodb 27017; do\n\
    echo "MongoDB non disponible, attente..."\n\
    sleep 2\n\
done\n\
echo "‚úÖ MongoDB disponible"\n\
\n\
# Attendre Hadoop (optionnel)\n\
echo "‚è≥ V√©rification Hadoop..."\n\
if nc -z hadoop-master 9870; then\n\
    echo "‚úÖ Hadoop disponible"\n\
else\n\
    echo "‚ö†Ô∏è  Hadoop non disponible (continuons quand m√™me)"\n\
fi\n\
\n\
# Attendre Spark (optionnel)\n\
echo "‚è≥ V√©rification Spark..."\n\
if nc -z spark-master 8080; then\n\
    echo "‚úÖ Spark disponible"\n\
else\n\
    echo "‚ö†Ô∏è  Spark non disponible (continuons quand m√™me)"\n\
fi\n\
\n\
echo "üöÄ D√©marrage Flask..."\n\
exec python main.py\n\
' > /app/start.sh && chmod +x /app/start.sh

# Healthcheck pour Docker
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:5000/api/system/status || exit 1

# Point d'entr√©e
CMD ["/app/start.sh"]